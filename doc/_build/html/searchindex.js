Search.setIndex({"docnames": ["index", "mock", "mock_service", "modules", "recommendation"], "filenames": ["index.rst", "mock.rst", "mock_service.rst", "modules.rst", "recommendation.rst"], "titles": ["Welcome to Restaurant Recommendation\u2019s documentation!", "mock module", "mock_service module", "restaurants_recommendation_ak", "recommendation module"], "terms": {"restaurants_recommendation_ak": 0, "mock": [0, 3], "modul": [0, 3], "mock_servic": [0, 3], "index": 0, "search": 0, "page": 0, "class": [1, 2, 4], "cuisin": [1, 3, 4], "valu": [1, 4], "sourc": [1, 2, 4], "base": [1, 2, 4], "enum": 1, "an": 1, "enumer": 1, "chines": [1, 3], "continent": [1, 3], "north_indian": [1, 3], "northindian": 1, "south_indian": [1, 3], "southindian": 1, "mockdata": [1, 3], "object": [1, 2, 4], "static": [1, 4], "get_random_date_rang": [1, 3], "mock_orders_in_json": [1, 3], "creat": [1, 4], "order": [1, 2, 3, 4], "json": [1, 2], "file": [1, 2], "consid": 1, "orderid": 1, "userid": 1, "restaurantid": 1, "costbracket": 1, "mock_restaurants_in_json": [1, 3], "restaur": [1, 2, 3, 4], "1": 1, "2": 1, "cheapest": 1, "costli": 1, "5": [1, 4], "3": 1, "rate": [1, 4], "averag": 1, "user": [1, 3, 4], "4": [1, 4], "isrecommend": 1, "which": 1, "ar": [1, 2], "offici": 1, "test": 1, "our": 1, "app": 1, "recommend": [1, 3], "onboardedtim": 1, "onboard": [1, 2], "time": 1, "int": [1, 4], "str": [1, 4], "float": 1, "bool": 1, "ordersservic": [2, 3], "get_all_ord": [2, 3], "dict": 2, "get": [2, 4], "all": [2, 4], "from": [2, 4], "memori": 2, "return": [2, 4], "restaurantsservic": [2, 3], "filter_new_restaur": [2, 3], "filter": 2, "last": 2, "48": 2, "hour": 2, "list": [2, 4], "get_all_restaur": [2, 3, 4], "get_top_four_by_r": [2, 3], "top": [2, 4], "four": 2, "new": 2, "costtrack": [3, 4], "cuisinetrack": [3, 4], "get_primary_typ": [3, 4], "primary_cost_bracket": [3, 4], "primary_cuisin": [3, 4], "secondary_cost_bracket": [3, 4], "secondary_cuisin": [3, 4], "userrestaurantrecommend": [3, 4], "logic_typ": [3, 4], "get_featured_restaur": [3, 4], "get_high_ratings_restaur": [3, 4], "get_low_rating_restaur": [3, 4], "get_new_created_restaur": [3, 4], "get_ordered_unique_recommend": [3, 4], "get_restaurants_recommend": [3, 4], "usersorderservic": [3, 4], "get_user_detail": [3, 4], "populate_user_cost_bracket": [3, 4], "populate_user_cuisin": [3, 4], "populate_user_ord": [3, 4], "cost_typ": 4, "orders_count": 4, "cuisine_typ": 4, "cost_track": 4, "cuisine_track": 4, "record": 4, "primari": 4, "type": 4, "count": 4, "paramet": 4, "cost": 4, "bracket": 4, "properti": 4, "": 4, "no_of_ord": 4, "secondari": 4, "user_id": 4, "ani": 4, "featur": 4, "If": 4, "none": 4, "us": 4, "follow": 4, "logic": 4, "newli": 4, "spread": 4, "singl": 4, "maintain": 4, "final": 4, "set": 4, "multipl": 4, "popul": 4, "track": 4}, "objects": {"": [[1, 0, 0, "-", "mock"], [2, 0, 0, "-", "mock_service"], [4, 0, 0, "-", "recommendation"]], "mock": [[1, 1, 1, "", "Cuisines"], [1, 1, 1, "", "MockData"], [1, 1, 1, "", "Order"], [1, 1, 1, "", "Restaurant"]], "mock.Cuisines": [[1, 2, 1, "", "CHINESE"], [1, 2, 1, "", "CONTINENTAL"], [1, 2, 1, "", "NORTH_INDIAN"], [1, 2, 1, "", "SOUTH_INDIAN"]], "mock.MockData": [[1, 3, 1, "", "get_random_date_range"], [1, 3, 1, "", "mock_orders_in_json"], [1, 3, 1, "", "mock_restaurants_in_json"]], "mock_service": [[2, 1, 1, "", "OrdersService"], [2, 1, 1, "", "RestaurantsService"]], "mock_service.OrdersService": [[2, 3, 1, "", "get_all_orders"]], "mock_service.RestaurantsService": [[2, 3, 1, "", "filter_new_restaurants"], [2, 3, 1, "", "get_all_restaurants"], [2, 3, 1, "", "get_top_four_by_ratings"]], "recommendation": [[4, 1, 1, "", "CostTracking"], [4, 1, 1, "", "CuisineTracking"], [4, 1, 1, "", "User"], [4, 1, 1, "", "UserRestaurantRecommendation"], [4, 1, 1, "", "UsersOrderService"]], "recommendation.User": [[4, 3, 1, "", "get_primary_type"], [4, 4, 1, "", "primary_cost_brackets"], [4, 4, 1, "", "primary_cuisines"], [4, 4, 1, "", "secondary_cost_brackets"], [4, 4, 1, "", "secondary_cuisines"]], "recommendation.UserRestaurantRecommendation": [[4, 2, 1, "", "LOGIC_TYPES"], [4, 3, 1, "", "get_all_restaurants"], [4, 3, 1, "", "get_featured_restaurants"], [4, 3, 1, "", "get_high_ratings_restaurants"], [4, 3, 1, "", "get_low_rating_restaurants"], [4, 3, 1, "", "get_new_created_restaurants"], [4, 3, 1, "", "get_ordered_unique_recommendation"], [4, 3, 1, "", "get_restaurants_recommendations"]], "recommendation.UsersOrderService": [[4, 3, 1, "", "get_user_details"], [4, 3, 1, "", "populate_user_cost_bracket"], [4, 3, 1, "", "populate_user_cuisines"], [4, 3, 1, "", "populate_user_orders"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"]}, "titleterms": {"welcom": 0, "restaur": 0, "recommend": [0, 4], "": 0, "document": 0, "content": 0, "indic": 0, "tabl": 0, "mock": 1, "modul": [1, 2, 4], "mock_servic": 2, "restaurants_recommendation_ak": 3}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"Welcome to Restaurant Recommendation\u2019s documentation!": [[0, "welcome-to-restaurant-recommendation-s-documentation"]], "Contents:": [[0, null]], "Indices and tables": [[0, "indices-and-tables"]], "mock module": [[1, "module-mock"]], "mock_service module": [[2, "module-mock_service"]], "restaurants_recommendation_ak": [[3, "restaurants-recommendation-ak"]], "recommendation module": [[4, "module-recommendation"]]}, "indexentries": {"chinese (mock.cuisines attribute)": [[1, "mock.Cuisines.CHINESE"]], "continental (mock.cuisines attribute)": [[1, "mock.Cuisines.CONTINENTAL"]], "cuisines (class in mock)": [[1, "mock.Cuisines"]], "mockdata (class in mock)": [[1, "mock.MockData"]], "north_indian (mock.cuisines attribute)": [[1, "mock.Cuisines.NORTH_INDIAN"]], "order (class in mock)": [[1, "mock.Order"]], "restaurant (class in mock)": [[1, "mock.Restaurant"]], "south_indian (mock.cuisines attribute)": [[1, "mock.Cuisines.SOUTH_INDIAN"]], "get_random_date_range() (mock.mockdata static method)": [[1, "mock.MockData.get_random_date_range"]], "mock": [[1, "module-mock"]], "mock_orders_in_json() (mock.mockdata method)": [[1, "mock.MockData.mock_orders_in_json"]], "mock_restaurants_in_json() (mock.mockdata method)": [[1, "mock.MockData.mock_restaurants_in_json"]], "module": [[1, "module-mock"], [2, "module-mock_service"], [4, "module-recommendation"]], "ordersservice (class in mock_service)": [[2, "mock_service.OrdersService"]], "restaurantsservice (class in mock_service)": [[2, "mock_service.RestaurantsService"]], "filter_new_restaurants() (mock_service.restaurantsservice method)": [[2, "mock_service.RestaurantsService.filter_new_restaurants"]], "get_all_orders() (mock_service.ordersservice method)": [[2, "mock_service.OrdersService.get_all_orders"]], "get_all_restaurants() (mock_service.restaurantsservice method)": [[2, "mock_service.RestaurantsService.get_all_restaurants"]], "get_top_four_by_ratings() (mock_service.restaurantsservice method)": [[2, "mock_service.RestaurantsService.get_top_four_by_ratings"]], "mock_service": [[2, "module-mock_service"]], "costtracking (class in recommendation)": [[4, "recommendation.CostTracking"]], "cuisinetracking (class in recommendation)": [[4, "recommendation.CuisineTracking"]], "logic_types (recommendation.userrestaurantrecommendation attribute)": [[4, "recommendation.UserRestaurantRecommendation.LOGIC_TYPES"]], "user (class in recommendation)": [[4, "recommendation.User"]], "userrestaurantrecommendation (class in recommendation)": [[4, "recommendation.UserRestaurantRecommendation"]], "usersorderservice (class in recommendation)": [[4, "recommendation.UsersOrderService"]], "get_all_restaurants() (recommendation.userrestaurantrecommendation method)": [[4, "recommendation.UserRestaurantRecommendation.get_all_restaurants"]], "get_featured_restaurants() (recommendation.userrestaurantrecommendation method)": [[4, "recommendation.UserRestaurantRecommendation.get_featured_restaurants"]], "get_high_ratings_restaurants() (recommendation.userrestaurantrecommendation method)": [[4, "recommendation.UserRestaurantRecommendation.get_high_ratings_restaurants"]], "get_low_rating_restaurants() (recommendation.userrestaurantrecommendation method)": [[4, "recommendation.UserRestaurantRecommendation.get_low_rating_restaurants"]], "get_new_created_restaurants() (recommendation.userrestaurantrecommendation method)": [[4, "recommendation.UserRestaurantRecommendation.get_new_created_restaurants"]], "get_ordered_unique_recommendation() (recommendation.userrestaurantrecommendation static method)": [[4, "recommendation.UserRestaurantRecommendation.get_ordered_unique_recommendation"]], "get_primary_type() (recommendation.user static method)": [[4, "recommendation.User.get_primary_type"]], "get_restaurants_recommendations() (recommendation.userrestaurantrecommendation method)": [[4, "recommendation.UserRestaurantRecommendation.get_restaurants_recommendations"]], "get_user_details() (recommendation.usersorderservice method)": [[4, "recommendation.UsersOrderService.get_user_details"]], "populate_user_cost_bracket() (recommendation.usersorderservice method)": [[4, "recommendation.UsersOrderService.populate_user_cost_bracket"]], "populate_user_cuisines() (recommendation.usersorderservice method)": [[4, "recommendation.UsersOrderService.populate_user_cuisines"]], "populate_user_orders() (recommendation.usersorderservice method)": [[4, "recommendation.UsersOrderService.populate_user_orders"]], "primary_cost_brackets (recommendation.user property)": [[4, "recommendation.User.primary_cost_brackets"]], "primary_cuisines (recommendation.user property)": [[4, "recommendation.User.primary_cuisines"]], "recommendation": [[4, "module-recommendation"]], "secondary_cost_brackets (recommendation.user property)": [[4, "recommendation.User.secondary_cost_brackets"]], "secondary_cuisines (recommendation.user property)": [[4, "recommendation.User.secondary_cuisines"]]}})